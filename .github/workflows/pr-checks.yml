name: PR Checks

on:
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Conventional Commit Check
      uses: amannn/action-semantic-pull-request@v3.4.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check PR Size
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: files } = await github.pulls.listFiles({
            ...context.repo,
            pull_number: context.issue.number,
          });
          
          const changes = files.reduce((acc, file) => acc + file.changes, 0);
          const MAX_CHANGES = 500;
          
          if (changes > MAX_CHANGES) {
            core.setFailed(`PR is too large. ${changes} changes exceeds limit of ${MAX_CHANGES}`);
          }

    - name: Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        ignore-unfixed: true
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        cd src/server/services
        pip install -r requirements.txt

    - name: Run ESLint
      run: npm run lint

    - name: Run Pylint
      run: |
        cd src/server/services
        pylint *.py

  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
      redis:
        image: redis:6.2
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16.x'
        cache: 'npm'

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        npm ci
        cd src/server/services
        pip install -r requirements.txt

    - name: Run tests
      run: |
        npm test
        cd src/server/services
        python -m pytest

    - name: Upload coverage
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info,./src/server/services/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

  build:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Build server
      run: docker build ./src/server

    - name: Build client
      run: docker build ./src/client

  notify:
    name: Notify
    needs: [validate, lint, test, build]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()
